{"mappings":"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","sources":["src/js/filmsAPIServise.js","src/js/workWithLocalStorage.js","src/js/renderMarkupFilmsCard.js","src/js/mainRendering.js","src/js/loader.js","src/js/WorkingFiles/Aleks.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'aa05d9ef1feff0e96ac321d8773a5c67';\n\nexport default class Apiservice {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n    this.requestType = 'trending';\n  }\n\n  async fetchMovieByQuery() {\n    const response = await fetch(\n      `${BASE_URL}${this.requestType}/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}`\n    );\n    const results = await response.json();\n    return results;\n  }\n\n  async getPopularMovies() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}${this.requestType}/movie/day?api_key=${API_KEY}&page=${this.page}`\n      );\n      const data = await response.json();\n      const popularMovies = data;\n      return popularMovies;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchMovieGenres() {\n    try {\n      const url = `${BASE_URL}genre/movie/list?api_key=${API_KEY}`;\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error('error');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getMoviesDetails(id) {\n    try {\n      const response = await fetch(\n        `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=${this.lang}`\n      );\n      if (!response.ok) {\n        throw new Error('error');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getMovieTrailer(id) {\n    const url = `${BASE_URL}movie/${id}/videos?api_key=${API_KEY}`;\n\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Error`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get pages() {\n    return this.page;\n  }\n  set pages(newPage) {\n    this.page = newPage;\n  }\n  get type() {\n    return this.requestType;\n  }\n\n  set type(newType) {\n    this.requestType = newType;\n  }\n}\n","import NewFilmApiServise from './filmsAPIServise';\n\nconst apiService = new NewFilmApiServise();\n\nasync function getGenresInfo() {\n  const response = await apiService.fetchMovieGenres();\n\n  const genres = response.genres;\n  genres.map(item => {\n    const values = Object.values(item);\n    localStorage.setItem(values[0], values[1]);\n  });\n}\n\ngetGenresInfo();\n","//Катя Допрацьовуєш тут\n\nexport default function renderMarkupFilmsCard(films) {\n  const markupFilmsCard = films\n    .map(({ title, poster_path, release_date, genre_ids }) => {\n      // Перевірка кількості жанрів\n\n      const genresId = genre_ids.map(id => localStorage.getItem(id));\n      \n      if (genresId.length > 2) {\n        genresId.splice(2, genresId.length - 2, 'Other');\n      }\n\n      const genres = genresId.join(', ');\n      \n      // Обрізання повної дати до року\n      const yearRelease = release_date.slice(0, 4);\n\n      return `\n          <li class=\"films-list__item\">\n                <a href=\"\">\n                  <img class=\"films-list-item__poster\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${title}\" loading=\"lazy\"  />\n                  <div class=\"films-list-item__info\">\n                    <h2 class=\"films-list-item__tittle\">${title}</h2>\n                    <p class=\"films-list-item__ganres\">\n                      <span class=\"films-list-item__year\">${genres} | ${yearRelease}</span>\n                    </p>\n                  </div>\n                </a>`;\n    })\n    .join('');\n\n  return markupFilmsCard;\n}\n","// Сюди бажано не лізти\nimport NewFilmApiServise from './filmsAPIServise';\n// import refs from './refs';\nimport renderMarkupFilmsCard from './renderMarkupFilmsCard';\nimport Loader from './loader';\n\nconst refs = {\n  homeHeaderForm: document.querySelector('.header__form'),\n  cardContainer: document.querySelector('.cards-container'),\n};\n\nconst apiService = new NewFilmApiServise();\nconst loader = new Loader();\n\ndocument.addEventListener('DOMContentLoaded', receivingPopularFilms);\n\nasync function receivingPopularFilms() {\n  loader.show();\n  const responce = await apiService.getPopularMovies();\n  loader.hide();\n\n  return (refs.cardContainer.innerHTML = renderMarkupFilmsCard(\n    responce.results\n  ));\n}\n\ndocument.addEventListener('submit', gettingMoviesByKeyword);\n\nasync function gettingMoviesByKeyword(e) {\n  e.preventDefault();\n\n  apiService.type = 'search';\n  apiService.query = refs.homeHeaderForm.query.value;\n\n  loader.show();\n  const responce = await apiService.fetchMovieByQuery();\n  loader.hide();\n\n  return (refs.cardContainer.innerHTML = renderMarkupFilmsCard(\n    responce.results\n  ));\n}\n","export default class Loader {\n  constructor() {\n    this.loaderElement = document.createElement('div');\n    this.loaderElement.className = 'loader';\n  }\n\n  show() {\n    document.body.appendChild(this.loaderElement);\n  }\n\n  hide() {\n    this.loaderElement.remove();\n  }\n}\n","async function fetchMovieDetails(movieId) {\n    const apiKey = 'aa05d9ef1feff0e96ac321d8773a5c67';\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}`\n    );\n    const data = await response.json();\n    return data;\n  }\n\n// import movieId from './Oleksandra';\n  // Определение функции для создания модального окна и заполнения его данными\n  \n  function createModal(movieData) {\n    modal = document.createElement('div');\n    modal.classList.add('modal');\n  \n    \n    const modalHTML = `\n      <div class=\"modal_content\">\n      <div class=\"close\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 30 30\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M8 8L22 22\" stroke=\"black\" stroke-width=\"2\"/>\n  <path d=\"M8 22L22 8\" stroke=\"black\" stroke-width=\"2\"/>\n  </svg>\n    </div>\n        <img src=\"https://image.tmdb.org/t/p/w500/${movieData.poster_path}\" class=\"modal_img\">\n        <div class=\"tablet_modal\">\n        <h2 class=\"main_text_modal\">${movieData.title}</h2>\n        <div class=\"modal_items_container\">\n          <ul class=\"modal_list\">\n            <li>Vote / Votes</li>\n            <li>Popularity</li>\n            <li>Original Title</li>\n            <li>Genre</li>\n          </ul>\n          <ul class=\"modal_list_value\">\n            <li>\n              <span class=\"vote_span\">${movieData.vote_average.toFixed(1)}</span>\n              <span class=\"delimiter\"> / </span>\n              <span class=\"vote_count_span\">${movieData.vote_count}</span>\n            </li>\n            <li>${movieData.popularity.toFixed(1)}</li>\n            <li>${movieData.title}</li>\n            <li>${movieData.genres[0].name}</li>\n          </ul>\n        </div>\n        <p class=\"about_modal_text\">About</p>\n        <p class=\"overview_modal\">${movieData.overview}</p>\n        <div class=\"buttons\">\n          <button class=\"button-watched\">Add to Watched</button>\n          <button class=\"button-queue\">Add to Queue</button>\n        </div>\n      </div>\n      </div>\n    `;\n  \n    modal.innerHTML += modalHTML;\n  \n    document.body.appendChild(modal);\n  \n    const closeBtn = modal.querySelector('.close');\n  \n    closeBtn.addEventListener('click', () => {\n      closeModal();\n      backdrop.remove();\n    });\n  \n    const closeOnEsc = (event) => {\n      if (event.key === 'Escape') {\n        closeModal();\n        backdrop.remove();\n      }\n    }\n  \n    document.addEventListener('keydown', closeOnEsc);\n  }\n  \n  //================= Определение функции для обработки нажатия на кнопку и получения данных от API================\n  async function handleModalBtnClick() {\n    const movieId = 255; // ID фильма, для которого нужно открыть модальное окно==========================\n    const movieData = await fetchMovieDetails(movieId);\n    createModal(movieData);\n    createBackdrop();\n  }\n  \n  \n  //===========БЕКДРОП=================\n  function createBackdrop() {\n    backdrop = document.createElement('div');\n    backdrop.classList.add('modal-backdrop');\n  \n    document.body.appendChild(backdrop);\n  \n    const closeBackdrop = () => {\n      backdrop.remove();\n      closeModal();\n    }\n  \n    backdrop.addEventListener('click', closeBackdrop);\n  \n    const closeOnEsc = (event) => {\n      if (event.key === 'Escape') {\n        closeBackdrop();\n        backdrop.remove();\n  \n      }\n    }\n  \n    document.addEventListener('keydown', closeOnEsc);\n  }\n  \n  //=================== Добавление обработчика события на кнопку \"Открыть модальное окно\"================\n  const modalBtn = document.querySelector('#modalBtn');\n  modalBtn.addEventListener('click', handleModalBtnClick);\n  \n  \n  //========\n  \n  function closeModal() {\n    modal.remove();\n    backdrop.remove();\n    document.removeEventListener('keydown', closeOnEsc);\n  }\n  "],"names":["$7003aba55d24a7e9$export$2e2bcd8739ae039","async","response","fetch","this","requestType","searchQuery","page","json","data","error","console","log","url","ok","Error","id","lang","query","newQuery","pages","newPage","type","newType","constructor","$1846867684e857fa$var$apiService","$93c9a44056c4a9b9$export$2e2bcd8739ae039","films","map","title","poster_path","release_date","genre_ids","genresId","localStorage","getItem","length","splice","join","slice","fetchMovieGenres","genres","item","values","Object","setItem","$1846867684e857fa$var$getGenresInfo","$af091a82a44a2137$var$refs","homeHeaderForm","document","querySelector","cardContainer","$af091a82a44a2137$var$apiService","$af091a82a44a2137$var$loader","show","body","appendChild","loaderElement","hide","remove","createElement","className","addEventListener","responce","getPopularMovies","innerHTML","results","e","preventDefault","value","fetchMovieByQuery","$e7775fe7970360c5$var$closeModal","modal","backdrop","removeEventListener","closeOnEsc","movieData","movieId","$e7775fe7970360c5$var$fetchMovieDetails","classList","add","modalHTML","vote_average","toFixed","vote_count","popularity","name","overview","event","key","$e7775fe7970360c5$var$createModal","closeBackdrop","$e7775fe7970360c5$var$createBackdrop"],"version":3,"file":"index.8ad6db7e.js.map"}