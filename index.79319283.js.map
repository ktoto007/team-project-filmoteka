{"mappings":"AAEA,MAAMA,EAAa,ICCJ,MAObC,0BACE,MAAMC,QAAiBC,MACrB,gCAAcC,KAAKC,oEAA8CD,KAAKE,oBAAoBF,KAAKG,QAGjG,aADsBL,EAASM,M,CAIjCP,yBACE,IACE,MAAMC,QAAiBC,MACrB,gCAAcC,KAAKC,uEAAiDD,KAAKG,QAErEE,QAAaP,EAASM,OAE5B,OADsBC,C,CAEtB,MAAOC,GACPC,QAAQC,IAAIF,E,EAIhBT,qBAAqBY,GACnB,IACE,MAAMX,QAAiBC,MACrB,sCAAoBU,uDAAkCT,KAAKU,QAE7D,IAAKZ,EAASa,GACZ,MAAM,IAAIC,MAAM,SAGlB,aADmBd,EAASM,M,CAE5B,MAAOE,GACPC,QAAQC,IAAIF,E,EAIZO,YACF,OAAOb,KAAKE,W,CAGVW,UAAMC,GACRd,KAAKE,YAAcY,C,CAGjBC,YACF,OAAOf,KAAKG,I,CAEVY,UAAMC,GACRhB,KAAKG,KAAOa,C,CAEVC,WACF,OAAOjB,KAAKC,W,CAGVgB,SAAKC,GACPlB,KAAKC,YAAciB,C,CA7DrBC,cACEnB,KAAKE,YAAc,GACnBF,KAAKG,KAAO,EACZH,KAAKC,YAAc,U,GDHjBmB,EAAO,CACXC,eAAgBC,SAASC,cAAc,iBACvCC,cAAeF,SAASC,cAAc,qBAqBxC,SAASE,EAAsBC,GAEK,MAA5BC,EAAcC,OAAOC,WAErBC,EAAkBJ,EACrBK,KAAI,EAACC,MAAEA,EAAKC,YAAEA,EAAWC,aAAEA,EAAYC,UAAEA,MAE2B,IAA/DC,EAEFA,EADET,GAAe,KACL,QACHA,GAAe,IACZ,QAEA,QAIVQ,EAAUE,OAAS,GACrBF,EAAUG,OAAO,EAAGH,EAAUE,OAAS,EAAG,SAM5C,MAAO,sKAGgFJ,WAAqBD,2BAA+BI,wHAEvFJ,8HAEEG,OATlCD,EAAaK,MAAM,EAAG,qFAY3B,IAEhBC,KAAK,IAER,OAAQpB,EAAKI,cAAciB,UAAYX,C,CAxDzCR,SAASoB,iBAAiB,oBAE1B7C,iBAEE4B,SADuB7B,EAAW+C,oBACHC,Q,IAGjCtB,SAASoB,iBAAiB,UAE1B7C,eAAsCgD,GACpCA,EAAEC,iBACFlD,EAAWqB,KAAO,SAClBrB,EAAWiB,MAAQO,EAAKC,eAAeR,MAAMkC,MAE7CtB,SADuB7B,EAAWoD,qBACHJ,Q","sources":["src/index.js","src/js/filmsAPIServise.js"],"sourcesContent":["import NewFilmApiServise from './js/filmsAPIServise';\n\nconst apiService = new NewFilmApiServise();\n\nconst refs = {\n  homeHeaderForm: document.querySelector('.header__form'),\n  cardContainer: document.querySelector('.cards-container'),\n};\n\ndocument.addEventListener('DOMContentLoaded', receivingPopularFilms);\n\nasync function receivingPopularFilms() {\n  const responce = await apiService.getPopularMovies();\n  renderMarkupFilmsCard(responce.results);\n}\n\ndocument.addEventListener('submit', gettingMoviesByKeyword);\n\nasync function gettingMoviesByKeyword(e) {\n  e.preventDefault();\n  apiService.type = 'search';\n  apiService.query = refs.homeHeaderForm.query.value;\n  const responce = await apiService.fetchMovieByQuery();\n  renderMarkupFilmsCard(responce.results);\n  //   console.log(refs.homeHeaderForm.query.value);\n}\n\nfunction renderMarkupFilmsCard(films) {\n  // Властивість, що перевіряє розмір екрану\n  const screenWidth = window.innerWidth;\n\n  const markupFilmsCard = films\n    .map(({ title, poster_path, release_date, genre_ids }) => {\n      // Перевірка розміру екрана і передача необхідного розміру постера для розмітки\n      let imageSize;\n      if (screenWidth >= 1200) {\n        imageSize = '395px';\n      } else if (screenWidth >= 768) {\n        imageSize = '336px';\n      } else {\n        imageSize = '280px';\n      }\n\n      // Перевірка кількості жанрів\n      if (genre_ids.length > 2) {\n        genre_ids.splice(2, genre_ids.length - 2, 'Other');\n      }\n\n      // Обрізання повної дати до року\n      const yearRelease = release_date.slice(0, 4);\n\n      return `\n          <li class=\"films-list__item\">\n                <a href=\"\">\n                  <img class=\"films-list-item__poster\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${title}\" loading=\"lazy\" width=${imageSize} />\n                  <div class=\"films-list-item__info\">\n                    <h2 class=\"films-list-item__tittle\">${title}</h2>\n                    <p class=\"films-list-item__ganres\">\n                      <span class=\"films-list-item__year\">${genre_ids} | ${yearRelease}</span>\n                    </p>\n                  </div>\n                </a>`;\n    })\n    .join('');\n\n  return (refs.cardContainer.innerHTML = markupFilmsCard);\n}\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'aa05d9ef1feff0e96ac321d8773a5c67';\n\nexport default class Apiservice {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n    this.requestType = 'trending';\n  }\n\n  async fetchMovieByQuery() {\n    const response = await fetch(\n      `${BASE_URL}${this.requestType}/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}`\n    );\n    const results = await response.json();\n    return results;\n  }\n\n  async getPopularMovies() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}${this.requestType}/movie/day?api_key=${API_KEY}&page=${this.page}`\n      );\n      const data = await response.json();\n      const popularMovies = data;\n      return popularMovies;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getFilmDetails(id) {\n    try {\n      const response = await fetch(\n        `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=${this.lang}`\n      );\n      if (!response.ok) {\n        throw new Error('error');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get pages() {\n    return this.page;\n  }\n  set pages(newPage) {\n    this.page = newPage;\n  }\n  get type() {\n    return this.requestType;\n  }\n\n  set type(newType) {\n    this.requestType = newType;\n  }\n}\n"],"names":["$1f0dc3b9307be026$var$apiService","async","response","fetch","this","requestType","searchQuery","page","json","data","error","console","log","id","lang","ok","Error","query","newQuery","pages","newPage","type","newType","constructor","$1f0dc3b9307be026$var$refs","homeHeaderForm","document","querySelector","cardContainer","$1f0dc3b9307be026$var$renderMarkupFilmsCard","films","screenWidth","window","innerWidth","markupFilmsCard","map","title","poster_path","release_date","genre_ids","imageSize","length","splice","slice","join","innerHTML","addEventListener","getPopularMovies","results","e","preventDefault","value","fetchMovieByQuery"],"version":3,"file":"index.79319283.js.map"}